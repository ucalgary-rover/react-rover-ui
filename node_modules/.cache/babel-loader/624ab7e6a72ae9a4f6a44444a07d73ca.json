{"ast":null,"code":"var _jsxFileName = \"/home/shivamdesai/Desktop/rover/react-rover-ui/src/components/MapView.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ROSLIB from 'roslib';\nimport { CSVLink } from \"react-csv\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMapEvent } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport icon from \"leaflet/dist/images/marker-icon.png\";\nimport roverIcon from \"../img/rover2.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconAnchor: [12, 40],\n  shadowAnchor: [12, 40]\n});\nlet RoverIcon = L.icon({\n  iconUrl: roverIcon,\n  iconSize: [30, 30],\n  iconAnchor: [15, 15]\n});\nL.Marker.prototype.options.icon = DefaultIcon;\nvar ros = new ROSLIB.Ros({\n  url: 'ws://localhost:9090'\n});\nros.on('connection', function () {\n  console.log('Connected to websocket server');\n});\nros.on('error', function (error) {\n  console.log('Error connecting to websocket server: ', error);\n});\nros.on('close', function () {\n  console.log('Connection to websocket server closed.');\n}); // var listener = new ROSLIB.Topic({\n// ros : ros,\n// name : 'rover/gps_report',\n// messageType: 'rover/GpsCoords'\n// });\n\nvar listener = new ROSLIB.Topic({\n  ros: ros,\n  name: 'test',\n  messageType: 'std_msgs/String'\n}); //adds waypoints to the map if in edit mode\n\nfunction ClickHandler(props) {\n  _s();\n\n  useMapEvent({\n    click(e) {\n      if (props.mapInteraction.userMode === \"view\") {\n        return;\n      }\n\n      props.addWaypoint(e.latlng);\n    }\n\n  });\n  return null;\n} //Draws the paths between waypoints\n//sends the waypoints into a csv file to save waypoints for future use\n\n\n_s(ClickHandler, \"UJFMGIyDtKpxgOUCFJT9iLs+CFY=\", false, function () {\n  return [useMapEvent];\n});\n\n_c = ClickHandler;\n\nfunction drawPaths(waypoints) {\n  let newPaths = [];\n\n  if (waypoints.length < 2) {\n    return [];\n  }\n\n  for (var i = 1; i < waypoints.length; i++) {\n    let pathToAdd = [waypoints[i], waypoints[i - 1]];\n    newPaths.push(pathToAdd);\n  }\n\n  return newPaths;\n} //most of the waypoints functionality\n\n\nexport function MapView(props) {\n  _s2();\n\n  const [roverPosition, setRoverPosition] = useState(L.latLng(51.076672, -114.137474));\n  const [waypoints, setWaypoints] = useState([]);\n  const [paths, setPaths] = useState([]);\n  let index = -1; // const [breakOrJoin, setBreakOrJoin] = useState([])\n\n  const popupButtonVisibility = props.mapInteraction.userMode === \"edit\" ? \"visible\" : \"hidden\";\n  listener.subscribe(function (message) {\n    //setRoverPosition(L.latLng(message.latitude, message.longitude));\n    console.log(\"TESTING\"); // console.log for testing purposes\n\n    console.log(message.latitude);\n    console.log(message.longitude);\n  }); //adds a waypoint to the list of waypoints\n  //if insert button is pressed, next way point is inserted after the waypoint associated with the insert button\n  //when inserting, creates temp waypoint lists for before the index waypoint and after. new waypoints are concated to the before list and then after is concated. \n\n  function addWaypoint(position) {\n    let indexOfMarker = index;\n\n    if (index < 0) {\n      let newWaypoints = waypoints.concat(position);\n      props.changeWaypoints(newWaypoints);\n      setWaypoints(newWaypoints);\n      setPaths(drawPaths(newWaypoints));\n    } else {\n      let newWaypointsBefore = waypoints.filter((position, idx) => {\n        if (idx > indexOfMarker) return false;\n        return true;\n      });\n      let newWaypointsAfter = waypoints.filter((position, idx) => {\n        if (idx <= indexOfMarker) return false;\n        return true;\n      });\n      let insertedWaypoint = newWaypointsBefore.concat(position);\n      let newWaypoints = insertedWaypoint.concat(newWaypointsAfter);\n      index = -1;\n      props.changeWaypoints(newWaypoints);\n      setWaypoints(newWaypoints);\n      setPaths(drawPaths(newWaypoints));\n    }\n  } //sets the index when inserting waypoints\n\n\n  function setIndex(markerIndex) {\n    index = markerIndex;\n  } //removes current waypoint and connects next and previous waypoints\n\n\n  function removeAndJoin(markersPosition) {\n    let newWaypoints = waypoints.filter(position => position != markersPosition);\n    props.changeWaypoints(newWaypoints);\n    setWaypoints(newWaypoints);\n    setPaths(drawPaths(newWaypoints));\n  } //removes all waypoints after selected waypoint\n\n\n  function removeAllAfter(markersPosition) {\n    let indexOfMarker = waypoints.length;\n    let newWaypoints = waypoints.filter((position, idx) => {\n      if (position === markersPosition) indexOfMarker = idx;\n      if (idx > indexOfMarker) return false;\n      return true;\n    });\n    props.changeWaypoints(newWaypoints);\n    setWaypoints(newWaypoints);\n    setPaths(drawPaths(newWaypoints));\n  }\n\n  useEffect(() => {\n    if (props.coordinateValues.lat !== null && props.coordinateValues.lng !== null && props.mapInteraction.userMode === \"edit\") {\n      addWaypoint(L.latLng(props.coordinateValues.lat, props.coordinateValues.long));\n    }\n  }, [props.coordinateValues]); //CSVLink is a button that downloads the current waypoints as a csv. can be clicked from any waypoint. \n\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: props.defaultCenter,\n    zoom: 17,\n    scrollWheelZoom: false,\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      display: \"inline-block\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ClickHandler, {\n      addWaypoint: addWaypoint,\n      mapInteraction: props.mapInteraction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n      url: props.mapTileDirectory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this), waypoints.map((position, idx) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: position,\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Waypoint \", idx + 1, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this), \"Lat: \", position.lat, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this), \"Lng: \", position.lng]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            visibility: popupButtonVisibility\n          },\n          onClick: () => removeAndJoin(position),\n          children: \"Remove & Join\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            visibility: popupButtonVisibility\n          },\n          onClick: () => removeAllAfter(position),\n          children: \"Remove All After\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            visibility: popupButtonVisibility\n          },\n          onClick: () => setIndex(idx),\n          children: \"Insert After\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CSVLink, {\n          data: waypoints,\n          filename: \"waypoints.csv\",\n          onClick: () => {\n            console.log(\"you click the link\");\n          },\n          children: \"download waypoints\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this)\n    }, `waypoint-${idx}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }, this)), paths.map((positions, idx) => /*#__PURE__*/_jsxDEV(Polyline, {\n      pathOptions: {\n        color: \"lightBlue\"\n      },\n      positions: positions\n    }, `path-${idx}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(Marker, {\n      position: roverPosition,\n      icon: RoverIcon,\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [\"Rover\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 15\n        }, this), \"Lat: \", roverPosition.lat, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this), \"Lng: \", roverPosition.lng]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 7\n  }, this);\n}\n\n_s2(MapView, \"QIz4BWNeV7a992oabA7sFwD6d6g=\");\n\n_c2 = MapView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ClickHandler\");\n$RefreshReg$(_c2, \"MapView\");","map":{"version":3,"sources":["/home/shivamdesai/Desktop/rover/react-rover-ui/src/components/MapView.js"],"names":["React","useState","useEffect","ROSLIB","CSVLink","MapContainer","TileLayer","Marker","Popup","Polyline","useMapEvent","L","icon","roverIcon","iconShadow","DefaultIcon","iconUrl","shadowUrl","iconAnchor","shadowAnchor","RoverIcon","iconSize","prototype","options","ros","Ros","url","on","console","log","error","listener","Topic","name","messageType","ClickHandler","props","click","e","mapInteraction","userMode","addWaypoint","latlng","drawPaths","waypoints","newPaths","length","i","pathToAdd","push","MapView","roverPosition","setRoverPosition","latLng","setWaypoints","paths","setPaths","index","popupButtonVisibility","subscribe","message","latitude","longitude","position","indexOfMarker","newWaypoints","concat","changeWaypoints","newWaypointsBefore","filter","idx","newWaypointsAfter","insertedWaypoint","setIndex","markerIndex","removeAndJoin","markersPosition","removeAllAfter","coordinateValues","lat","lng","long","defaultCenter","height","width","display","mapTileDirectory","map","visibility","positions","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ROSLIB from 'roslib';\nimport { CSVLink } from \"react-csv\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  Polyline,\n  useMapEvent,\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport icon from \"leaflet/dist/images/marker-icon.png\";\nimport roverIcon from \"../img/rover2.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconAnchor: [12, 40],\n  shadowAnchor: [12, 40],\n});\n\nlet RoverIcon = L.icon({\n  iconUrl: roverIcon,\n  iconSize: [30, 30],\n  iconAnchor: [15, 15],\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\nvar ros = new ROSLIB.Ros({\nurl : 'ws://localhost:9090'\n});\n\nros.on('connection', function() {\nconsole.log('Connected to websocket server');\n});\n\nros.on('error', function(error) {\nconsole.log('Error connecting to websocket server: ', error);\n});\n\nros.on('close', function() {\nconsole.log('Connection to websocket server closed.');\n});\n\n// var listener = new ROSLIB.Topic({\n// ros : ros,\n// name : 'rover/gps_report',\n// messageType: 'rover/GpsCoords'\n// });\n\nvar listener = new ROSLIB.Topic({\nros : ros,\nname : 'test',\nmessageType: 'std_msgs/String'\n});\n\n//adds waypoints to the map if in edit mode\nfunction ClickHandler(props) {\n  useMapEvent({\n    click(e) {\n      if (props.mapInteraction.userMode === \"view\") {\n        return;\n      }\n      \n      props.addWaypoint(e.latlng);\n    },\n  });\n  return null;\n}\n\n//Draws the paths between waypoints\n//sends the waypoints into a csv file to save waypoints for future use\nfunction drawPaths(waypoints) {\n    let newPaths = [];\n    if (waypoints.length < 2) {\n      return [];\n    }\n    for (var i = 1; i < waypoints.length; i++) {\n      let pathToAdd = [waypoints[i], waypoints[i - 1]];\n      newPaths.push(pathToAdd);\n    }\n    return newPaths;\n  }\n\n  //most of the waypoints functionality\nexport function MapView(props){\n  const [roverPosition, setRoverPosition] = useState(L.latLng(51.076672, -114.137474));\n  const [waypoints, setWaypoints] = useState([]);\n  const [paths, setPaths] = useState([]);\n  let index = -1; \n  // const [breakOrJoin, setBreakOrJoin] = useState([])\n\n  const popupButtonVisibility = props.mapInteraction.userMode === \"edit\" ? \"visible\": \"hidden\";\n\n  listener.subscribe(function(message){\n    //setRoverPosition(L.latLng(message.latitude, message.longitude));\n    \n    console.log(\"TESTING\");\n\n    // console.log for testing purposes\n    console.log(message.latitude);\n    console.log(message.longitude);\n  });\n\n  //adds a waypoint to the list of waypoints\n  //if insert button is pressed, next way point is inserted after the waypoint associated with the insert button\n  //when inserting, creates temp waypoint lists for before the index waypoint and after. new waypoints are concated to the before list and then after is concated. \n  function addWaypoint(position) {\n\n    let indexOfMarker = index;\n\n    if(index < 0){\n      let newWaypoints = waypoints.concat(position);\n      props.changeWaypoints(newWaypoints);\n      setWaypoints(newWaypoints);\n      setPaths(drawPaths(newWaypoints));\n    }\n\n    else{\n      let newWaypointsBefore = waypoints.filter((position, idx) =>{ \n        if(idx > indexOfMarker)\n          return false;\n\n        return true;\n      });\n\n      let newWaypointsAfter = waypoints.filter((position, idx) =>{\n        if(idx <= indexOfMarker)\n          return false;\n\n        return true;\n      });\n\n      let insertedWaypoint = newWaypointsBefore.concat(position);\n\n      let newWaypoints = insertedWaypoint.concat(newWaypointsAfter);\n\n      index = -1;\n\n      props.changeWaypoints(newWaypoints);\n      setWaypoints(newWaypoints);\n      setPaths(drawPaths(newWaypoints));\n    }\n\n  }\n\n  //sets the index when inserting waypoints\n  function setIndex(markerIndex){\n    index = markerIndex;\n  }\n  \n  //removes current waypoint and connects next and previous waypoints\n  function removeAndJoin(markersPosition){\n    let newWaypoints = waypoints.filter(position => position != markersPosition);\n    props.changeWaypoints(newWaypoints);\n    setWaypoints(newWaypoints);\n    setPaths(drawPaths(newWaypoints));\n  }\n\n  //removes all waypoints after selected waypoint\n  function removeAllAfter(markersPosition){\n    let indexOfMarker = waypoints.length;\n\n    let newWaypoints = waypoints.filter((position, idx) =>{ \n      if (position === markersPosition)\n        indexOfMarker = idx;\n\n      if(idx > indexOfMarker)\n        return false;\n\n      return true;\n    });\n    props.changeWaypoints(newWaypoints)\n    setWaypoints(newWaypoints);\n    setPaths(drawPaths(newWaypoints));\n  }\n\n  useEffect(() => {\n    if(props.coordinateValues.lat !== null && props.coordinateValues.lng !== null && props.mapInteraction.userMode === \"edit\"){\n      addWaypoint(L.latLng(props.coordinateValues.lat, props.coordinateValues.long));\n    }\n      \n  }, [props.coordinateValues]);\n\n  //CSVLink is a button that downloads the current waypoints as a csv. can be clicked from any waypoint. \n\n   return (\n      <MapContainer\n        center={props.defaultCenter}\n        zoom={17}\n        scrollWheelZoom={false}\n        style={{ height: \"100%\", width: \"100%\", display: \"inline-block\" }}\n      >\n        <ClickHandler\n          addWaypoint={addWaypoint}\n          mapInteraction={props.mapInteraction}\n        />\n        <TileLayer url={props.mapTileDirectory} />\n\n        {waypoints.map((position, idx) => (\n          <Marker key={`waypoint-${idx}`} position={position}>\n            <Popup>\n              <span>\n                Waypoint {idx + 1}\n                <br />\n                Lat: {position.lat}\n                <br />\n                Lng: {position.lng}\n              </span>\n              <br/>\n              <button style={{visibility: popupButtonVisibility}} onClick={() => removeAndJoin(position)}>Remove & Join</button>\n              <button style={{visibility: popupButtonVisibility}} onClick={() => removeAllAfter(position)}>Remove All After</button>\n              <button style={{visibility: popupButtonVisibility}} onClick={() => setIndex(idx)}>Insert After</button>\n              \n              <CSVLink data={waypoints} filename=\"waypoints.csv\" onClick={() => {\n                console.log(\"you click the link\");\n              }}>\n              download waypoints</CSVLink>\n            </Popup>\n          </Marker>\n          ))}\n\n        {paths.map((positions, idx) => (\n          <Polyline\n            key={`path-${idx}`}\n            pathOptions={{ color: \"lightBlue\" }}\n            positions={positions}\n          />\n        ))}\n\n          \n        <Marker position = {roverPosition} icon = {RoverIcon}>\n            <Popup>\n              Rover\n              <br />\n              Lat: {roverPosition.lat}\n              <br />\n              Lng: {roverPosition.lng}\n            </Popup>\n        </Marker>\n\n\n      </MapContainer>\n    );\n}"]},"metadata":{},"sourceType":"module"}