{"ast":null,"code":"var _jsxFileName = \"/home/shivamdesai/Desktop/rover/react-rover-ui/src/components/Connections.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport EventEmitter2 from 'eventemitter2';\nimport ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ros = new ROSLIB.Ros({\n  url: 'ws://localhost:9090'\n});\nros.on('connection', function () {\n  console.log('Connected to websocket server');\n});\nros.on('error', function (error) {\n  console.log('Error connecting to websocket server: ', error);\n});\nros.on('close', function () {\n  console.log('Connection to websocket server closed.');\n});\nvar listener = new ROSLIB.Topic({\n  ros: ros,\n  name: '/rover/Connections',\n  messageType: 'rover/SignalStatus'\n}); //function component called Connections\n//has four states, bit_rate, link_quality, signal, noise  \n\nexport function Connections(props) {\n  _s();\n\n  const [bit_rate, setBit] = useState(\"N/A\");\n  const [link_quality, setLink] = useState(\"N/A\");\n  const [signal, setSignal] = useState(\"N/A\");\n  const [noise, setNoise] = useState(\"N/A\"); // when you a message,message contains the four states that can change\n  // the current state\n\n  listener.subscribe(function (message) {\n    setBit(message.bit_rate);\n    setLink(message.link_quality);\n    setSignal(message.signal);\n    setNoise(message.noise);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        paddingLeft: \"12px\"\n      },\n      children: \"Connections\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        paddingLeft: \"12px\"\n      },\n      children: [\"Bit rate:  \", bit_rate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        paddingLeft: \"12px\"\n      },\n      children: [\"Link quality:  \", link_quality]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        paddingLeft: \"12px\"\n      },\n      children: [\"Signal:  \", signal]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        paddingLeft: \"12px\"\n      },\n      children: [\"Noise:   \", noise]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Connections, \"PkFbRpivuIRG0KL6uPu6za2Czm8=\");\n\n_c = Connections;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connections\");","map":{"version":3,"sources":["/home/shivamdesai/Desktop/rover/react-rover-ui/src/components/Connections.js"],"names":["React","Component","useState","EventEmitter2","ROSLIB","ros","Ros","url","on","console","log","error","listener","Topic","name","messageType","Connections","props","bit_rate","setBit","link_quality","setLink","signal","setSignal","noise","setNoise","subscribe","message","paddingLeft"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,eAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAIC,GAAG,GAAG,IAAID,MAAM,CAACE,GAAX,CAAe;AACrBC,EAAAA,GAAG,EAAG;AADe,CAAf,CAAV;AAIEF,GAAG,CAACG,EAAJ,CAAO,YAAP,EAAqB,YAAW;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,CAFD;AAIAL,GAAG,CAACG,EAAJ,CAAO,OAAP,EAAgB,UAASG,KAAT,EAAgB;AAC9BF,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDC,KAAtD;AACD,CAFD;AAIAN,GAAG,CAACG,EAAJ,CAAO,OAAP,EAAgB,YAAW;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACD,CAFD;AAIA,IAAIE,QAAQ,GAAG,IAAIR,MAAM,CAACS,KAAX,CAAiB;AAC9BR,EAAAA,GAAG,EAAGA,GADwB;AAE9BS,EAAAA,IAAI,EAAG,oBAFuB;AAG9BC,EAAAA,WAAW,EAAE;AAHiB,CAAjB,CAAf,C,CAOF;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AAAA;;AAChC,QAAM,CAACC,QAAD,EAAWC,MAAX,IAAqBjB,QAAQ,CAAC,KAAD,CAAnC;AACA,QAAM,CAACkB,YAAD,EAAeC,OAAf,IAA0BnB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACoB,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACsB,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,KAAD,CAAlC,CAJgC,CAMhC;AACA;;AACAU,EAAAA,QAAQ,CAACc,SAAT,CAAmB,UAASC,OAAT,EAAkB;AACnCR,IAAAA,MAAM,CAACQ,OAAO,CAACT,QAAT,CAAN;AACAG,IAAAA,OAAO,CAACM,OAAO,CAACP,YAAT,CAAP;AACAG,IAAAA,SAAS,CAACI,OAAO,CAACL,MAAT,CAAT;AACAG,IAAAA,QAAQ,CAACE,OAAO,CAACH,KAAT,CAAR;AACD,GALD;AAOA,sBACE;AAAA,4BACG;AAAI,MAAA,KAAK,EAAE;AAACI,QAAAA,WAAW,EAAE;AAAd,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAG,MAAA,KAAK,EAAE;AAACA,QAAAA,WAAW,EAAE;AAAd,OAAV;AAAA,gCAA6CV,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,eAGG;AAAG,MAAA,KAAK,EAAE;AAACU,QAAAA,WAAW,EAAE;AAAd,OAAV;AAAA,oCAAiDR,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA,YAHH,eAIG;AAAG,MAAA,KAAK,EAAE;AAACQ,QAAAA,WAAW,EAAE;AAAd,OAAV;AAAA,8BAA2CN,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,YAJH,eAKG;AAAG,MAAA,KAAK,EAAE;AAACM,QAAAA,WAAW,EAAE;AAAd,OAAV;AAAA,8BAA2CJ,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,YALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA1BeR,W;;KAAAA,W","sourcesContent":["import React, { Component, useState } from 'react';\nimport EventEmitter2 from 'eventemitter2';\nimport ROSLIB from 'roslib';\n\nvar ros = new ROSLIB.Ros({\n    url : 'ws://localhost:9090'\n  });\n  \n  ros.on('connection', function() {\n    console.log('Connected to websocket server');\n  });\n  \n  ros.on('error', function(error) {\n    console.log('Error connecting to websocket server: ', error);\n  });\n  \n  ros.on('close', function() {\n    console.log('Connection to websocket server closed.');\n  });\n  \n  var listener = new ROSLIB.Topic({\n    ros : ros,\n    name : '/rover/Connections',\n    messageType: 'rover/SignalStatus'\n  });\n\n  \n//function component called Connections\n//has four states, bit_rate, link_quality, signal, noise  \nexport function Connections(props){\n  const [bit_rate, setBit] = useState(\"N/A\");\n  const [link_quality, setLink] = useState(\"N/A\");\n  const [signal, setSignal] = useState(\"N/A\");\n  const [noise, setNoise] = useState(\"N/A\");\n\n  // when you a message,message contains the four states that can change\n  // the current state\n  listener.subscribe(function(message) {\n    setBit(message.bit_rate);\n    setLink(message.link_quality);\n    setSignal(message.signal);\n    setNoise(message.noise);\n  });\n\n  return (\n    <div>\n       <h4 style={{paddingLeft: \"12px\"}}>Connections</h4>\n       <p style={{paddingLeft: \"12px\"}}>Bit rate:  {bit_rate}</p>\n       <p style={{paddingLeft: \"12px\"}}>Link quality:  {link_quality}</p>\n       <p style={{paddingLeft: \"12px\"}}>Signal:  {signal}</p>\n       <p style={{paddingLeft: \"12px\"}}>Noise:   {noise}</p>\n\n     </div>\n    \n  );\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}